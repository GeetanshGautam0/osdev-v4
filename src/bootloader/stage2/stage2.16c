#include "include/c_stdint.h"
#include "include/c_stdio.h"
#include "include/disk.h"
#include "include/fat.h"
#include "include/blpol.h"


/*
 * The CDECL calling convention:
 *
 *      Passed through stack
 *      Pushed from right to left
 *      Caller removes parameters from stack
 *
 *  Returns:
 *      Integers, ptrs: EAX
 *      Floating point: ST0
 *
 *  Registers:
 *      EAX, ECX, EDX saved by called
 *      All others saved by callee
 *
 *  Name mangling:
 *      C functions are prepended with an underscore (cstart_ => _cstart_)
 * */

void __far * g_data = (void far*)0x00500200;

void _cdecl cstart_
    (uint16_t boot_drive)
{
    printf16("[S] <S2cSTART>: STAGE2.16C called.\n\r");

    disk_t disk;
    if (!disk_init(&disk, boot_drive))
    {
        printf16("[E] <S2cSTART>: Error S2-1 disk init failed.\n\r");
        goto _halt;
    }
    printf16("[S] Disk initialization successful.\r\n");

    disk_read_sectors(&disk, 19, 1, g_data);

    if (!fat_init(&disk))
    {
        printf16("[E] <S2cSTART>: Error S2-2 FAT init failed.\n\r");
        goto _halt;
    }
    printf16("[S] FAT initialization successful.\r\n");

    // Browse files in ROOT DIR
    puts("/\r\n");
    fat_file_t __far * fd = fat_open(&disk, "/GGOS");
    fat_directory_entry_t entry;
    int i = 0; 
    while (fat_read_entry(&disk, fd, &entry) && ++i <= 5)
    {
        printf16("/    ");
        for (int i = 0; i < 11; i++)
            putc(entry.name[i]);
        printf16("\r\n");
    }

    fat_close(fd);

    // goto _halt;

    // read test.txt
    char buffer[100];
    uint32_t read;
    fd = fat_open(&disk, "/test.txt");
    while ((read = fat_read(&disk, fd, sizeof(buffer), buffer)))
    {
        for (uint32_t i = 0; i < read; i++)
        {
            if (buffer[i] == '\n')
                putc('\r');
            putc(buffer[i]);
        }
    }
    fat_close(fd);

_halt:
    for (;;);
}
