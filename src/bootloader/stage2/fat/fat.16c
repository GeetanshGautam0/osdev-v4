#include "../include/fat.h"
#include "../include/c_stdio.h"
#include "../include/memory.h"
#include "../include/memdefs.h"
#include "../include/c_string.h"
#include "../include/utility.h"
#include "../include/ctype.h"
#include "../include/blpol.h"


#pragma pack(push, 1)
typedef struct {
    uint8_t     boot_jump_instruction [3];

    /* FAT12 Header */

    uint8_t     oem_identifier [8];
    uint16_t    bytes_per_sector;
    uint8_t     sectors_per_cluster;
    uint16_t    reserved_sectors;
    uint8_t     fat_count;
    uint16_t    dir_entries_count;
    uint16_t    total_sectors;
    uint8_t     media_desc_type;
    uint16_t    sectors_per_fat;
    uint16_t    sectors_per_track;
    uint16_t    heads;
    uint32_t    hidden_sectors;
    uint32_t    large_sector_count;

    /* Extended Boot Record */

    uint8_t     drive_number;
    uint8_t     _reserved;
    uint8_t     signature;
    uint32_t    volume_id;
    uint8_t     volume_label[11];
    uint8_t     system_id[8];

} fat_boot_sector_t;
#pragma pack(pop)

typedef struct
{
    uint8_t buffer[FAT_SECTOR_SIZE];
    fat_file_t public;
    bool opened;
    uint32_t first_cluster;
    uint32_t current_cluster;
    uint32_t current_sector_in_cluster;
} fat_file_data_t;

typedef struct {
    union
    {
        fat_boot_sector_t boot_sector;
        uint8_t boot_sector_bytes[FAT_SECTOR_SIZE];
    } boot_sector;

    fat_file_data_t root_directory;
    fat_file_data_t opened_files[FAT_MAX_FILE_HANDLES];

} fat_data_t;

static fat_data_t __far * g_data;
static uint8_t __far * g_fat = NULL;
static uint32_t g_data_section_lba;


/*
 * ---------------------------------------------------------------------------------------------------------------------
 *                                               FAT FUNCTION DEFINITIONS
 * ---------------------------------------------------------------------------------------------------------------------
 * */

bool
    fat_read_boot_sector
    ( disk_t * disk )
{
    return disk_read_sectors(disk, 0, 1, g_data->boot_sector.boot_sector_bytes);            /* Read 1 sector at LBA = 0 */
}

bool
    fat_read_fat
    ( disk_t * disk )
{
    return disk_read_sectors(
            disk,
            g_data->boot_sector.boot_sector.reserved_sectors,
            g_data->boot_sector.boot_sector.sectors_per_fat,
            g_fat
    );
}

bool
    fat_init
    ( disk_t * disk )
{
    /* Configure to load the data in the right addresses */
    g_data = (fat_data_t __far*) MEMORY_FAT_ADDR;

    if (!fat_read_boot_sector(disk))
    {
        printf16("[E] <FAT.INIT>: Read boot sector failed.\n\r");
        return false;
    }

    // Read the file allocation table
    // Set the FAT to load in the right address
    g_fat = (uint8_t __far *)g_data + sizeof(fat_data_t);
    uint32_t fat_size = g_data->boot_sector.boot_sector.bytes_per_sector * g_data->boot_sector.boot_sector.sectors_per_fat;
    // Check if the FAT data can fit in the memory "allocated" for it.
    if ( (sizeof(fat_data_t) + fat_size) >= MEMORY_FAT_SIZE )
    {
        printf16("[E] <FAT.INIT>: Insufficient memory. Need %u, allocated %u\n\r", sizeof(fat_data_t) + fat_size, MEMORY_FAT_SIZE);
        return false;
    }

    if (!fat_read_fat(disk))
    {
        printf16("[E] <FAT.INIT>: Failed to read file allocation table.\n\r");
        return false;
    }

    // Read the root directory
    uint32_t root_dir_lba =
            g_data->boot_sector.boot_sector.reserved_sectors +
            g_data->boot_sector.boot_sector.sectors_per_fat * g_data->boot_sector.boot_sector.fat_count;
    /* [Reserved Sectors][FAT...][ROOT DIRECTORY] */
    uint32_t root_dir_size =
            sizeof(fat_directory_entry_t) * g_data->boot_sector.boot_sector.dir_entries_count;

    g_data->root_directory.public.handle = FAT_ROOT_DIR_HANDLE;
    g_data->root_directory.public.is_dir = true;
    g_data->root_directory.public.pos = 0;
    g_data->root_directory.public.size = sizeof(fat_directory_entry_t) * g_data->boot_sector.boot_sector.dir_entries_count;

    g_data->root_directory.opened = true;
    g_data->root_directory.first_cluster = root_dir_lba;
    g_data->root_directory.current_cluster = root_dir_lba;
    g_data->root_directory.current_sector_in_cluster = 0;

    if (!disk_read_sectors(disk, root_dir_lba, 1, g_data->root_directory.buffer))   /* Reads the root dir into its buffer */
    {
        printf16("[E] <FAT.INIT>: Failed to read root directory\n\r");
        return false;
    }

    // Calculate the data section
    uint32_t root_dir_sectors = (root_dir_size + g_data->boot_sector.boot_sector.bytes_per_sector  - 1) /
                                g_data->boot_sector.boot_sector.bytes_per_sector;
    g_data_section_lba = root_dir_lba + root_dir_sectors;

    // Reset opened files
    for (uint32_t i = 0; i < FAT_MAX_FILE_HANDLES; i++)
        g_data->opened_files[i].opened = false;

    printf16("[E] <FAT.INIT>: done\n\r");

    return true; /* FAT init successfully */

}

uint32_t fat_cluster_to_lba
    (uint32_t cluster)
{
    return g_data_section_lba + (cluster - 2) * g_data->boot_sector.boot_sector.sectors_per_cluster;
}

fat_file_t __far *
    fat_open_entry
    (
        disk_t * disk,
        fat_directory_entry_t * entry
    )
{

    int handle = -1;
    for ( int i = 0; i < FAT_MAX_FILE_HANDLES && handle < 0; i++ )
    {
        if ( !g_data->opened_files[i].opened ) /* If a handle is available, then use it */
            handle = i;
    }

    // Out of handles
    if ( handle < 0 )
    {
        printf16("[E] <FAT.OPEN>: Out of file handles\r\n");
        return NULL;
    }

    // Setup variables
    fat_file_data_t __far * fd = &g_data->opened_files[handle];
    fd->public.handle = handle;
    fd->public.is_dir = (entry->attributes & FAT_ATTRIBUTE_DIRECTORY) != 0;
    fd->public.pos = 0;
    fd->public.size = entry->size;
    fd->first_cluster = entry->first_cluster_low + ((uint32_t)entry->first_cluster_high << 16);
    fd->current_cluster = fd->first_cluster;
    fd->current_sector_in_cluster = 0;

    if (!disk_read_sectors(disk, fat_cluster_to_lba(fd->current_cluster), 1, fd->buffer))
    {
        printf16("[E] <FAT.OPEN>: Read error R1-1.\r\n");
        return NULL;
    }

    fd->opened = true;
    return &fd->public;

}

uint32_t
    fat_next_cluster
    ( uint32_t current_cluster )
{

    uint32_t fat_index = current_cluster * 3 / 2;
    if (current_cluster % 2 == 0)
        return (*(uint16_t __far *)(g_fat + fat_index)) & 0x0FFF;
    else
        return (*(uint16_t __far *)(g_fat + fat_index)) >> 4;

}

uint32_t
    fat_read
    (
        disk_t * disk,
        fat_file_t __far * file,
        uint32_t byte_count,
        void * data_out
    )
{
    // Get file data
    fat_file_data_t __far * fd = (file->handle == FAT_ROOT_DIR_HANDLE)
            ? &g_data->root_directory                   /* If we're reading the root dir */
            : &g_data->opened_files[file->handle];      /* If we're reading an opened file */
    uint8_t * u8_data_out = (uint8_t *)data_out;

    // Don't read past the end of the file
    if (!fd->public.is_dir)
        byte_count = min(byte_count, fd->public.size - fd->public.pos);

    while (byte_count > 0)
    {
        uint32_t left_in_buffer = FAT_SECTOR_SIZE - (fd->public.pos % FAT_SECTOR_SIZE);
        uint32_t take = min(byte_count, left_in_buffer);

        memcpy(u8_data_out, fd->buffer + fd->public.pos % FAT_SECTOR_SIZE, take);
        
        u8_data_out += take;
        fd->public.pos += take;
        byte_count -= take;

        if (left_in_buffer == take)
        {
            if (fd->public.handle == FAT_ROOT_DIR_HANDLE) {
                ++fd->current_cluster;
                if (!disk_read_sectors(disk, fd->current_cluster, 1, fd->buffer))
                {
                    printf16("[E] <FAT.READ>: Read error R2-1.\r\n");
                    break;
                }
            }
            else 
            {
                if (++fd->current_sector_in_cluster >= g_data->boot_sector.boot_sector.sectors_per_cluster)
                {
                    fd->current_sector_in_cluster = 0;
                    fd->current_cluster = fat_next_cluster(fd->current_cluster);
                }

                if (fd->current_cluster >= 0xFF8)
                {
                    // Mark EOF
                    fd->public.size = fd->public.pos;
                    break;
                }

                // Read the next sector

                if (!disk_read_sectors(disk, fat_cluster_to_lba(fd->current_cluster) + fd->current_sector_in_cluster, 1, fd->buffer))
                {
                    printf16("[E] <FAT.READ>: Read error R2-2.\r\n");
                    break;
                }
            }
        }
    }

    return u8_data_out - (uint8_t*)data_out;
}

bool
    fat_read_entry
    (
            disk_t * disk,
            fat_file_t __far * file,
            fat_directory_entry_t * dir_entry
    )
{
    return fat_read(disk, file, sizeof(fat_directory_entry_t), dir_entry) == sizeof(fat_directory_entry_t);
}


void
    fat_close
    ( fat_file_t __far * file )
{
    if (file->handle == FAT_ROOT_DIR_HANDLE)
    {
        file->pos = 0;
        g_data->root_directory.current_cluster = g_data->root_directory.first_cluster;
    }
    else
        g_data->opened_files[file->handle].opened = false;
}

bool
    fat_find_file
    (
            disk_t * disk,
            fat_file_t __far * file,
            const char * fname,
            fat_directory_entry_t * entry_out
    )
{
    char fat_name[12];
    fat_directory_entry_t entry;

    memset(fat_name, ' ', sizeof(fat_name));
    fat_name[11] = 0;                           // Null terminator

    const char * ext = strchr(fname, '.');       // Index of '.' in file name (fname)
    if (ext == NULL) ext = fname + 11;

    for (int i = 0; i < 8 && fname[i] && fname + i < ext; i++)
        fat_name[i] = to_upper(fname[i]);

    if (ext != NULL)
        for (int i = 0; i < 3 && ext[i + 1]; ++i)
            fat_name[i + 8] = to_upper(ext[i + 1]);

    while (fat_read_entry(disk, file, &entry))
    {
        if (memcmp(fat_name, entry.name, 11) == 0)
        {
            *entry_out = entry;
            return true;
        }
    }

    return false;
}

fat_file_t __far *
    fat_open
(
    disk_t * disk,
    const char * path
) {

    char name[FAT_MAX_PATH_SIZE];

    // Ignore leading slash
    path[0] == '/' ? (void) ++path : (void) path;   /* (void) shows that the output is not needed */

    fat_file_t __far * current = &g_data->root_directory.public;

    while (*path)
    {
        bool is_last = false;
        const char * delim = strchr(path, '/');     /* Get the index of the first '/' in path */
        
        if (delim != NULL)
        {
            memcpy(name, path, delim - path);       /* Read the path name upto the '/' */
            name[delim - path + 1] = 0;             /* Null terminate the path */
            path = delim + 1;                       /* Move the path ptr */
        }
        
        else
        {   /* No more '/' characters in path; this is the last segment. */
            unsigned len = strlen(path);            /* Get the length of the remaining path str */
            memcpy(name, path, len);                /* Copy the str into the name variable */
            name[len + 1] = 0;                      /* Add null terminator */
            path += len;                            /* Move path ptr */
            is_last = true;                         /* Set the is_last var to true since this is the last segment */
        }

        // Find directory entry in current directory
        fat_directory_entry_t entry;
        if (fat_find_file(disk, current, name, &entry))
        {
            fat_close(current);

            // Check if a directory
            if (!is_last && (entry.attributes & FAT_ATTRIBUTE_DIRECTORY) == 0)
            {
                printf16("[E] <FAT.FIND> Error F1-1D - %s.\r\n", name);     // Error F1-1D: NOT A DIRECTORY ERROR
                return NULL;
            }

            // Open new dir
            current = fat_open_entry(disk, &entry);
        }
        else
        {
            fat_close(current);

            printf16("[E] <FAT.FIND>: Error F1-2 - %s\r\n", name);          // Error F1-2: Not found
            return NULL;
        }
    }

    return current;

}
