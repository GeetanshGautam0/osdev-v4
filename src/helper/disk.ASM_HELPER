;
;   Convers a logical block address (LBA) to cylinder, head, sector address (CHS)
;
;   Params:
;       ax: LBA address
;   Returns:
;       cx [bits 0-5]:   sector number
;       cx [bits 6-15]:  cylinder number
;       dh:              head number
;
;   Requisites:
;       bdb_sectors_per_track is defined in the script importing this helper script.
;       bdb_heads is defined in the script importing this helper script.

lba_to_chs:

    push ax
    push dx

    xor dx, dx                                      ; dx = 0. Faster than mov dx, 0

.lba_to_chs_sector:
    ; DIV instruction:          Quotient -> ax
    ;                           Remained -> dx

    div word [bdb_sectors_per_track]                ; ax = LBA / Sectors Per Track
                                                    ; dx = LBA % Sectors Per Track

    inc dx                                          ; dx = (LBA % Sectors Per Track) + 1 = sector number
    mov cx, dx                                      ; store the output in the correct output register

.lba_to_chs_cylinder_and_head:

    xor dx, dx                                      ; dx = 0
                                                    ; Note: ax = LBA / Sectors Per Track

    div word [bdb_heads]                            ; ax = (LBA / SectorsPerTrack) / Heads = cylinder number
                                                    ; dx = (LBA / SectorsPerTrack) % Heads = head number

    mov dh, dl                                      ; Move the lower bits of dx (dl; head number) to dh
    mov ch, al                                      ; Move the cylinder number to the upper bits of cx.
                                                    ;       NOTE: cl (lower bits of cx) contain sector number

    shl ah, 6
    or cl, ah                                       ; Put upper two bits of cylinder number in cl

.lba_to_chs_done:

    pop ax                                          ; Restore contents of dx into ax
    mov dl, al                                      ; Restore dl from al (dh used as return)
    pop ax                                          ; Retore ax

    ret

;
;   Reads sectors from a disk
;   Params:
;       ax: LBA address
;       cl: number of sectors
;       dl: drive number
;       es:bx: memory address where to store the data read
;   Uses:
;       INT 13
;
;   Requisites:
;       The label disk_read_failure is defined.
;

disk_read:
    push ax
    push bx
    push cx
    push dx
    push di

    push cx                                         ; Temporarily save cl (the number of sectors to read)
    call lba_to_chs                                 ; Compute C, H, and S numbers
    pop ax                                          ; Restore cx (=> cl) into ax (=> al); al: number of sectors to read.

    mov ah, 0x02
    ; Floppy disks can be unreliable; it is recommended to read the disk at least 3 times.
    mov di, 3                                       ; Retry count

.disk_read_retry:
    pusha                                           ; Save all registers
    stc                                             ; Set carry flag as some BIOS's don't

    int 0x13                                        ; Call the interrupt.
                                                    ; If carry flag cleared, then success.
    jnc .disk_read_done                             ; Jump if carry flag not set

    ; Read failed
    popa                                            ; Restore flags
    call disk_reset                                 ; Reset the disk

    dec di                                          ; Decrement the number of retries
    test di, di

    jnz .disk_read_retry                            ; If di != 0, attempts left ==> jump to top of loop

.disk_read_failed:                                  ; If the above condition is not met, then the read has failed
                                                    ;       and no more retries are left (di = 0)
    jmp disk_read_failure

.disk_read_done:
    popa                                            ; Restore all registers

    pop di
    pop dx
    pop cx
    pop bx
    pop ax

    ret

;
;   Resets disk controller
;   Params:
;       dl: drive number
;   Uses:
;       INT 13
;
;   Requisites:
;       The label disk_read_failure is defined.


disk_reset:
    pusha

.disk_reset_main:

    mov ah, 0
    stc                                             ; Set carry flag
    int 0x13                                        ; If success, then carry flag will be cleared

    jc  disk_read_failure                           ; If failure, jump to disk_read_failure (defined externally)

.disk_reset_done:
    popa
    ret
